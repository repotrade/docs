{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WTF is repo.trade?","text":"<p>Repos, in the context of repo.trade, are revolutionary blockchain-based tokens that represent ownership and value of a specific GitHub repository. When a project is pushed to GitHub, a unique token is automatically minted for that repository. This system brings numerous benefits:</p> <ul> <li>Financial Incentives: Creators earn passive income as their project's token value increases, allowing them to focus on development.</li> <li>Community Engagement: Token holders become stakeholders, fostering a more involved and motivated community.</li> <li>Project Promotion: Tokens incentivize users and investors to actively promote and contribute to the project's success.</li> </ul> <p>Developers and users should be ecstatic about this innovation as it transforms open-source development into a sustainable, rewarding ecosystem where everyone's efforts are aligned towards mutual success! \ud83d\ude80\u2728</p>"},{"location":"#how-repotrade-works-under-the-hood","title":"How repo.trade Works Under the Hood","text":""},{"location":"#tokenizing-a-git-respository","title":"Tokenizing a Git Respository","text":"<p>Tokenizing a git repository can revolutionize open source development and community engagement. Here's how:</p> <ul> <li>Ownership &amp; Stake \ud83c\udfe0: Token holders become stakeholders in the project, aligning their interests with the project's success.</li> <li>Incentivized Contributions \ud83d\udcb8: Contributors receive tokens for their efforts, motivating them to actively engage in development, bug fixes, and feature enhancements.</li> <li>Community Governance \ud83d\uddf3\ufe0f: Token-weighted voting systems enable decentralized decision-making, giving the community a direct say in the project's direction.</li> <li>Gamification &amp; Speculation \ud83c\udfae: The speculative nature of tokens gamifies contributions, encouraging more participation and competition among users.</li> <li>Financial Freedom for Creators \ud83d\udcbc: Creators earn passive income from token appreciation, allowing them to focus on their projects full-time.</li> <li>Enhanced Visibility \ud83c\udf10: Projects with tokenized repositories gain more attention from investors and tech enthusiasts, increasing their chances of success.</li> </ul> <p>By integrating blockchain technology and tokenomics into git repositories, we create an ecosystem where developers can thrive financially while fostering vibrant and engaged communities around open source software.</p>"},{"location":"#auction-and-swaps","title":"Auction and Swaps","text":""},{"location":"#project-description","title":"Project Description","text":"<p>repo.trade is a groundbreaking platform that leverages auctions and swaps to create a fair initial funding period for open-source projects. Here's how it works:</p> <ul> <li>Initial Auction \ud83c\udff7\ufe0f: Instead of donations, an auction is held where participants bid on tokens representing the project. This initial phase ensures that early contributors cannot \"snipe\" all the tokens at a low price, promoting fairness.</li> <li>Token Allocation \ud83d\udcc8: Funds raised during the auction are subsequently placed on a bonding curve, establishing liquidity and price stability for the token.</li> <li>Swaps with Trading Fees \ud83d\udcb1: Following the auction, tokens can be traded via swaps. Notably, trading fees apply to these swaps and benefit the creator of the open-source software.</li> </ul> <p>This approach not only democratizes access to early-stage project funding but also aligns incentives among developers, investors, and users. The result is a more equitable ecosystem where creators can sustainably finance their work while fostering community engagement.</p>"},{"location":"#trading-fees","title":"Trading Fees","text":"<p>Each trade incurs a small fee. These fees accumulate in a pool associated with each repository. Once verified by the platform, these fees are rewarded to the repository owner, creating an ongoing revenue stream for developers.</p> <p>By integrating auctions and swaps with trading fees, repo.trade ensures that creators are continuously supported while fostering an active trading environment that benefits both developers and investors.</p>"},{"location":"faqs/","title":"Common questions and answers","text":""},{"location":"glossary/","title":"Glossary","text":"<ul> <li>repo: A repo is a representation of a particular git repository that   for tracking of funding and states</li> <li>namespace: repo.trade can be extended to support repositories outside of   github through adding other namespaces</li> <li>auction: An auction takes places initially that takes 14 days and allows   to bid for the repository-specific token when it launches.</li> <li>swap: After auction, the token is minted and can be swapped against USDC   on repo.trade.</li> </ul>"},{"location":"short-story/","title":"A Short Story of the Future","text":""},{"location":"short-story/#chapter-1-tokenizing-repositories","title":"Chapter 1: Tokenizing Repositories","text":"<p>In the bustling digital landscape of 2030, a young developer named Aria pushed the final commit to her revolutionary AI-powered language translation tool. As she created the GitHub repository, a blockchain-based system automatically minted a unique token for her project.</p>"},{"location":"short-story/#chapter-2-the-angels","title":"Chapter 2: The Angels","text":"<p>Word spread quickly about Aria's innovative software. Tech enthusiasts and investors alike began acquiring the project's tokens, speculating on its future success. As the token's value rose, Aria received a steady stream of passive income, allowing her to focus full-time on improving her creation.</p>"},{"location":"short-story/#chapter-3-the-speculators-and-enthusiats","title":"Chapter 3: The Speculators and Enthusiats","text":"<p>Meanwhile, a code analyst named Leo made a name for himself by identifying promising open-source projects early. His latest find was Aria's translation tool. Leo invested heavily in its token and produced in-depth reviews of the codebase, further driving interest and engagement.</p>"},{"location":"short-story/#chapter-4-community-engagement-and-participation","title":"Chapter 4: Community Engagement and Participation","text":"<p>The tokenomics incentivized holders to actively participate in the project's development. Users contributed bug reports, feature requests, and even code submissions to increase the software's value and, by extension, the token's worth.</p>"},{"location":"short-story/#chapter-5-the-success","title":"Chapter 5: The Success","text":"<p>As Aria's project flourished, she marveled at how this new ecosystem had transformed open-source development, creating a symbiotic relationship between creators, users, and investors. The blockchain-based token system had turned her passion into a sustainable career, all while fostering a vibrant and engaged community around her work.</p>"},{"location":"support/","title":"Support","text":"<p>You can reach out to us through</p> <ul> <li>telegram</li> <li>github issues</li> </ul>"},{"location":"whitepaper/","title":"Executive Summary","text":"<p>Repo.trade is a revolutionary platform designed to solve the persistent underfunding of critical open-source projects by applying successful Web3 engagement strategies. The platform operates in three stages: an initial angel investment period, a curve-based trading phase, and culminates in an decentralized exchange listing (DEL). Repo.trade offers multiple benefits for developers, including fee earnings and token allocations, while providing the community with rewards for engagement and entertainment. The project implements key features such as token-based incentives, gamification, tiered reward systems, and governance participation to drive user engagement and create economic value. By ticking most boxes for successful Web3 projects, including community building, transparency, and a unique value proposition, repo.trade aims to create a self-sustaining ecosystem that aligns the interests of all stakeholders. This innovative approach not only addresses the financial challenges of open-source development but also promotes innovation, enhances security, and contributes to the overall health of the open-source ecosystem.</p>"},{"location":"whitepaper/#introduction","title":"Introduction","text":"<ul> <li>The open-source software development landscape faces a critical issue: chronic underfunding of essential projects.</li> <li>This underfunding persists despite the immense value these projects bring to the digital ecosystem.</li> <li>A stark contrast exists between this situation and the success of Web3 projects, where millions are invested in speculative ventures and meme coins.</li> <li>Repo.trade aims to bridge this gap by leveraging engagement farming strategies proven successful in the Web3 space.</li> <li>The goal is to create a sustainable funding model for open-source projects.</li> <li>Key strategies include implementing token-based incentives, gamification, and community-driven governance.</li> <li>Repo.trade seeks to align the interests of developers, users, and investors.</li> <li>This innovative approach addresses the financial challenges faced by open-source maintainers.</li> <li>It also enhances community engagement and fosters innovation.</li> <li>Ultimately, repo.trade aims to ensure the long-term viability of critical digital infrastructure.</li> </ul>"},{"location":"whitepaper/#problem-statement","title":"Problem Statement","text":"<ul> <li>Chronic underfunding of critical open-source projects</li> <li>Misalignment between value creation and financial compensation in open-source</li> <li>Lack of sustainable business models for open-source maintainers</li> <li>Insufficient recognition and support from beneficiary companies and projects</li> <li>Risk to long-term viability and security of essential digital infrastructure</li> <li>Burnout and resource constraints among open-source maintainers</li> <li>Potential for reduced innovation and delayed updates in critical software</li> <li>Discouragement of talented developers from contributing to open-source</li> <li>Vulnerability to security risks due to inadequate resources for proper maintenance</li> <li>Threat to the overall health and growth of the open-source ecosystem</li> </ul>"},{"location":"whitepaper/#engagement-farming","title":"Engagement farming","text":"<p>Meanwhile, people are throwing millions of dollars into meme coins merely for the purpose of entertainment and speculation.</p> <p>Based on the success of Web3 projects in general and pump.fun specifically, as well as the concept of engagement farming, we can learn precicely what is needed for this project:</p> <ol> <li>Token-based incentives: Rewarding users with tokens for active participation and engagement.</li> <li>Gamification of activities: Implementing game-like elements to make interactions more enjoyable and addictive.</li> <li>Tiered reward systems: Creating levels or tiers of engagement with increasing benefits to encourage long-term participation.</li> <li>Social networking features: Integrating social elements to foster community building and viral growth.</li> <li>Governance participation: Allowing token holders to vote on project decisions, creating a sense of ownership and involvement.</li> <li>Yield farming opportunities: Offering additional rewards for users who stake their tokens or provide liquidity.</li> <li>NFT integration: Using non-fungible tokens as unique rewards or access passes for engaged users.</li> <li>Referral programs: Incentivizing users to bring in new participants through referral bonuses.</li> <li>Cross-platform integrations: Partnering with other projects to create synergies and expand the user base.</li> </ol> <p>These strategies can create economic value by increasing user retention, driving token demand, expanding the user base, and creating a self-sustaining ecosystem of engaged participants.</p>"},{"location":"whitepaper/#solution-overview","title":"Solution Overview","text":""},{"location":"whitepaper/#stages","title":"Stages","text":""},{"location":"whitepaper/#stage-1-auction","title":"Stage 1: Auction","text":"<p>After creating the token, it enters an auction period of 2 weeks. In this period, a daily auction takes place. Every day a certain percentage of the total supply is handed out to participants in the daily's round. To participate in the auction, a user must put money into the token's vault. This process cannot be reversed during the auction. Token are initially issued in a \"Reserve-Backed Token Auction\" or \"Bonding Curve Initialization Auction\" Here's a breakdown of the key elements:</p> <ol> <li>It's an auction for tokens, where people bid using a stable asset like USDC.</li> <li>The auction runs for a fixed period.</li> <li>After the auction ends, the collected USDC becomes the reserve for a bonding curve.</li> </ol> <p>This mechanism combines elements of:</p> <ol> <li>Dutch auctions (often used in token sales)</li> <li>Bonding curves (used in some DeFi protocols)</li> <li>Initial liquidity provision for AMMs</li> </ol> <p>The unique aspect here is that the auction serves as a price discovery mechanism and a way to bootstrap the initial liquidity for the bonding curve. This could potentially lead to a more efficient and fair token distribution while simultaneously setting up the token's long-term trading mechanism.</p>"},{"location":"whitepaper/#stage-2-fun-on-the-curve","title":"Stage 2: Fun on the Curve","text":"<p>Once the two initial auction days have passed, the coin enters a phase where it can be traded freely on a curve. This means, the invested capital from the previous round is used to support the buying and selling of token against an automated market maker (AMM). This trading affects the pricing used by the AMM by moving the buy/sell price on a curve. We are planning to start on a constant product formula curve <code>x*y=k</code> which makes the AMM a Constant Product Automated Market Maker (CPAMM).</p>"},{"location":"whitepaper/#further-stages","title":"Further stages","text":"<p>Further stages, like listing on DEXes are under consideration but not on the roadmap just yet.</p>"},{"location":"whitepaper/#technology-stack","title":"Technology Stack","text":"<ul> <li>Solana blockchain: High-performance, scalable layer-1 protocol</li> <li>Anchor-ang: Solana's development framework for smart contracts</li> <li>Rust: Programming language for on-chain program development</li> <li>TypeScript: For building the SDK and enhancing type safety</li> <li>Node.js: Server-side runtime environment for JavaScript</li> <li>Python: For backend tasks and data processing</li> <li>SvelteKit with Vite: As our frontend library</li> <li>Web3.js: Library for interacting with the Solana blockchain</li> </ul>"},{"location":"whitepaper/#tokenomics","title":"Tokenomics","text":"<p>There are no plans to release a separate governance token currently but the potential for a future Token Generation Event (TGE) are present already since collected fees are split between \"protocol\" and the repository owner.</p>"},{"location":"whitepaper/#use-cases","title":"Use Cases","text":""},{"location":"whitepaper/#benefits-for-the-developer","title":"Benefits for the developer","text":"<ul> <li>the owner (or group) of the repo earns a fee on every interaction with the repo.trade program</li> <li>the have a fixed amount of token they can claim (after verification of ownership) and use as they wish</li> <li>for themselves</li> <li>for community rewards</li> <li>community incentivized to market the software, e.g. on social media</li> </ul>"},{"location":"whitepaper/#benefits-for-the-community","title":"Benefits for the community","text":"<ul> <li>engagement can be rewarded</li> <li>bug reporting</li> <li>bug fixing</li> <li>feature development</li> <li>entertainment when scouting for newest, greatest software</li> </ul>"},{"location":"whitepaper/#benefits-for-the-open-source-software-community","title":"Benefits for the open source software community","text":"<ul> <li>straight-forward implementation of bounty structures</li> <li>solana-blinks natively supported</li> </ul>"},{"location":"whitepaper/#business-model","title":"Business Model","text":"<p>Repo.trade ears revenue by</p> <ul> <li>transaction fee: interactions with the program</li> <li>setup fee (not implemented yet): for creating a new repo on the platform for tokenizing a repository</li> </ul>"},{"location":"whitepaper/#conclusion","title":"Conclusion","text":"<p>A successful web3 projects needs:</p> <ul> <li>[x] Community building: Successful projects often focus on building a strong, engaged community.</li> <li>[x] Gamification: Many successful platforms incorporate game-like elements to increase user engagement.</li> <li>[x] Incentive structures: Well-designed token economics and reward systems can drive user participation.</li> <li>[ ] User experience: An intuitive and enjoyable user interface can significantly boost engagement.</li> <li>[x] Transparency: Regular updates and open communication with the community often lead to higher trust and engagement.</li> <li>[x] Unique value proposition: Projects that offer something novel or solve a real problem tend to attract and retain users.</li> <li>[x] Viral mechanics: Features that encourage users to invite others or share content can lead to rapid growth.</li> <li>[ ] Continuous improvement: Successful projects often iterate based on user feedback and market trends.</li> </ul> <p>And repo.trade ticks most of them already.</p>"},{"location":"concepts/namespaces/","title":"Namespaces","text":""},{"location":"concepts/namespaces/#namespaces-in-repotrade","title":"Namespaces in RepoTrade","text":"<p>Namespaces in RepoTrade are used to group and organize repositories. They serve as a way to categorize and manage repos within a specific domain or organization.</p> <p>Info</p> <p>Namespaces are managed by repo.trade. So far, the only supported namespace is denoted to <code>github</code>. Fees can vary.</p>"},{"location":"concepts/namespaces/#key-features-of-namespaces","title":"Key Features of Namespaces","text":"<ul> <li>Each namespace has a unique name and URI</li> <li>Namespaces are associated with an authority (owner)</li> <li>They include a swap fee setting (in basis points)</li> </ul>"},{"location":"concepts/namespaces/#example-from-unit-test","title":"Example from Unit Test","text":"<p>In the <code>repotrade.ts</code> test file, we can see how a namespace is created:</p> <pre><code>const NAMESPACE_NAME = \"github.com/\";\nconst tx = await program.methods\n  .initializeNamespace(NAMESPACE_NAME, \"https://github.com/\", 30) // 30 bps = 0.3% fee\n  .accounts({\n    state: statePda,\n    namespace: namespacePda,\n    authority: ADMIN_SIGNER.publicKey,\n    mint: testUsdcMint,\n    systemProgram: SystemProgram.programId,\n  })\n  .signers([ADMIN_SIGNER])\n  .rpc();\n\n\nIn this example:\n\n* The namespace name is set to \"github.com/\"\n* The URI is set to \"https://github.com/\"\n* A swap fee of 30 basis points (0.3%) is established\n* An admin account is set as the authority\n\nNamespaces provide a structured way to organize repos, making it easier for users to navigate and interact with related projects on the RepoTrade platform.\n</code></pre>"},{"location":"concepts/repos/","title":"Repos","text":""},{"location":"concepts/repos/#repos-in-repotrade","title":"Repos in Repo.Trade","text":"<p>In the context of Repo.Trade, a repo (repository) represents a project or codebase that can receive contributions and have its own token economy.</p>"},{"location":"concepts/repos/#key-characteristics-of-repos","title":"Key Characteristics of Repos","text":"<ul> <li>Each repo belongs to a namespace</li> <li>Repos have an auction period for initial contributions</li> <li>After the auction, repos enter a swapping state where tokens can be traded</li> </ul>"},{"location":"concepts/repos/#repo-state-structure","title":"Repo State Structure","text":"<p>The repo state, defined in <code>programs/repotrade/src/states/repo.rs</code>, includes:</p> <pre><code>pub struct Repo {\n    pub name: String,\n    pub namespace_index: u32,\n    pub owner: Pubkey,\n    pub status: RepoStatus,\n    pub auction: Auction,\n    pub usdc_reserve: u64,\n    pub token_reserve: u64,\n    pub owner_fee_balance: u64,\n    pub protocol_fee_balance: u64,\n    pub owner_fee_claimed: u64,\n    pub protocol_fee_claimed: u64,\n    pub padding: [u64; 8],\n}\n```\n\nKey components:\n\n * name: The repo's name\n * namespace_index: Index of the namespace it belongs to\n * owner: Public key of the repo owner\n * status: Current state of the repo (Pending, Auction, or Swapping)\n * auction: Details about the auction phase\n * usdc_reserve and token_reserve: Liquidity pools for swapping\n * Fee-related fields for tracking balances and claims\n\n## Example from Unit Test\n\nIn the repotrade.ts test file, we can see how a repo is created:\n\n```typescript\nconst REPO_NAME = \"solana-labs/solana\";\nconst now = Math.floor(Date.now() / 1000);\nconst tx = await program.methods\n  .initializeRepo(new anchor.BN(now), REPO_NAME)\n  .accounts({\n    repo: repoPda,\n    namespace: namespacePda,\n    payer: ADMIN_SIGNER.publicKey,\n    systemProgram: SystemProgram.programId,\n  })\n  .signers([ADMIN_SIGNER])\n  .rpc();\n</code></pre> <p>In this example:</p> <ul> <li>A new repo named \"solana-labs/solana\" is created</li> <li>The repo is associated with a specific namespace</li> <li>The current timestamp is used to set the start time for the auction</li> <li>An admin account initializes the repo</li> </ul> <p>Repos in Repo.Trade serve as the central entity for managing project-specific token economies, facilitating contributions, and enabling token swaps after the initial auction period.</p>"},{"location":"concepts/repos/#repo-statuses-in-repotrade","title":"Repo Statuses in Repo.Trade","text":"<p>Repos in Repo.Trade go through different statuses as they progress. These statuses determine what actions can be taken with the repo at any given time.</p>"},{"location":"concepts/repos/#repo-status-enum","title":"Repo Status Enum","text":"<p>The repo status is defined in <code>programs/repotrade/src/states/repo.rs</code>:</p> <pre><code>pub enum RepoStatus {\n    Pending,\n    Auction,\n    Swapping,\n}\n</code></pre>"},{"location":"concepts/repos/#status-progression","title":"Status Progression","text":"<p>1 Pending: Initial state when a repo is first created (Note: This state might be removed in future versions) 2 Auction: The contribution period where users can contribute USDC 3 Swapping: After the auction ends, the repo enters the swapping state where tokens can be traded</p>"},{"location":"concepts/repos/#state-transitions","title":"State Transitions","text":""},{"location":"concepts/repos/#pending-to-auction","title":"Pending to Auction","text":"<p>This transition happens automatically when the repo is initialized. In the unit tests, we see this when a repo is created:</p> <pre><code>const tx = await program.methods\n  .initializeRepo(new anchor.BN(now), REPO_NAME)\n  .accounts({\n    repo: repoPda,\n    namespace: namespacePda,\n    payer: ADMIN_SIGNER.publicKey,\n    systemProgram: SystemProgram.programId,\n  })\n  .signers([ADMIN_SIGNER])\n  .rpc();\n\nconst repoAccount = await program.account.repo.fetch(repoPda);\nexpect(repoAccount.status.toString()).to.equal(RepoStates.Auction.toString());\n</code></pre>"},{"location":"concepts/repos/#auction-to-swapping","title":"Auction to Swapping","text":"<p>This transition occurs when tokens are claimed after the auction period. In the unit tests, we see this transition when claiming tokens:</p> <pre><code>await program.methods\n  .claimTokens()\n  .accounts({\n    repo: repoPda,\n    angel: angelPda,\n    namespace: namespacePda,\n    tokenMint: repoMintPda,\n    angelTokenAccount: await splToken.getAssociatedTokenAddress(\n      repoMintPda,\n      wallet.publicKey,\n    ),\n    repoTokenVault: repoTokenVaultPda,\n    payer: wallet.publicKey,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n    systemProgram: SystemProgram.programId,\n  })\n  .signers([payer])\n  .rpc();\n\nconst repoAccount = await program.account.repo.fetch(repoPda);\nexpect(repoAccount.status.toString()).to.equal(RepoStates.Swapping.toString());\n</code></pre>"},{"location":"concepts/repos/#impact-of-status-on-repo-actions","title":"Impact of Status on Repo Actions","text":"<ul> <li> <p>During the Auction status:</p> </li> <li> <p>Users can contribute USDC to the repo</p> </li> <li> <p>Tokens cannot be claimed or swapped yet</p> </li> <li> <p>During the Swapping status:</p> </li> <li>Contributions are no longer accepted</li> <li>Users can claim their tokens based on their contributions</li> <li>Tokens can be swapped with USDC</li> </ul> <p>Understanding these statuses and transitions is crucial for users to know when they can contribute, claim tokens, or start trading.</p>"},{"location":"concepts/rewards/","title":"Rewards","text":""},{"location":"concepts/rewards/#rewards","title":"Rewards","text":"<p>The purpose of repo.trade is to provide a stream of funding to software developers that implement popular open source software.</p>"},{"location":"concepts/rewards/#fee-distribution","title":"Fee Distribution","text":"<p>50/50 Split</p> <p>The fees collected on Repo.Trade are divided equally between two parties:</p> <ol> <li>Protocol Fees: 50% of the fees go to the Repo.Trade protocol.</li> <li>Owner Fees: 50% of the fees go to the verified owner of the repository.</li> </ol> <p>This equal distribution ensures that:</p> <ul> <li>The protocol can sustain and improve its services.</li> <li>Repository owners are incentivized to participate and maintain their projects.</li> </ul>"},{"location":"concepts/rewards/#owner-verification","title":"Owner Verification","text":"<p>To claim owner fees, repository owners must go through a verification process:</p> <ol> <li>Owners need to authenticate through GitHub.</li> <li>This process verifies their ownership of the repository.</li> <li>Only after successful verification can owners claim their share of the fees.</li> </ol> <p>Fee Accumulation and Claiming</p> <ul> <li>Owner fees accumulate in the repository's account.</li> <li>Verified owners can claim these fees periodically and at any time.</li> <li>Unclaimed fees remain in the repository's account until claimed.</li> <li>As long as a repository has no owner, the owner rewards will continue to accumulate</li> </ul>"},{"location":"concepts/rewards/#importance-of-verification","title":"Importance of Verification","text":"<p>The verification process through GitHub serves several purposes:</p> <ul> <li>Ensures that fees are distributed to legitimate repository owners.</li> <li>Prevents unauthorized claims on repository fees.</li> <li>Maintains the integrity and trust in the Repo.Trade ecosystem.</li> </ul> <p>Warning</p> <p>Currently only personal accounts can verify their repositories. Organizational repositories will be supported in a future update.</p>"},{"location":"concepts/rewards/#conclusion","title":"Conclusion","text":"<p>The 50/50 fee split between the protocol and repository owners, coupled with the GitHub verification process, creates a fair and secure environment in Repo.Trade. This structure incentivizes both platform development and active participation of project owners, fostering a sustainable and growing ecosystem.</p>"},{"location":"concepts/swaps/","title":"Swaps","text":""},{"location":"concepts/swaps/#swaps-in-repotrade","title":"Swaps in Repo.Trade","text":""},{"location":"concepts/swaps/#overview","title":"Overview","text":"<p>Swaps in Repo.Trade allow users to exchange USDC for repo tokens and vice versa. This feature becomes available once a repo enters the Swapping state after its initial auction period.</p>"},{"location":"concepts/swaps/#how-swaps-work","title":"How Swaps Work","text":"<ol> <li>Users can swap USDC for repo tokens or repo tokens for USDC.</li> <li>The swap rate is determined by the current reserves of USDC and repo tokens.</li> <li>Each swap incurs a fee, set by the namespace.</li> </ol>"},{"location":"concepts/swaps/#swap-mathematics","title":"Swap Mathematics","text":"<p>The swap mechanism uses a constant product formula, similar to many decentralized exchanges. The core function is <code>calculate_amount_out</code> in <code>programs/repotrade/src/math/curve.rs</code>:</p> <pre><code>pub fn calculate_amount_out(\namount_in_with_fee: u64,\nreserve_in: u64,\nreserve_out: u64,\n) -&gt; Option&lt;u64&gt; {\n  let numerator = (amount_in_with_fee as u128).checked_mul(reserve_out as u128)?;\n  let denominator = (reserve_in as u128).checked_add(amount_in_with_fee as u128)?;\n  Some((numerator / denominator) as u64)\n}\n</code></pre> <p>This function ensures that the product of the reserves remains constant after the swap, maintaining price equilibrium.</p> <p>Here's an example of a swap from the <code>tests/repotrade.ts</code> file:</p> <pre><code>const usdcAmount = new anchor.BN(1_000_000); // 1 USDC\nawait program.methods\n  .swap(usdcAmount, true)\n  .accounts({\n    repo: repoPda,\n    namespace: namespacePda,\n    userAccount: userUsdcAccount,\n    userTokenAccount: userTokenAccount,\n    mint: testUsdcMint,\n    tokenMint: repoMintPda,\n    repoTokenVault: repoTokenVaultPda,\n    repoVault: repoVaultPda,\n    payer: wallet.publicKey,\n    tokenProgram: TOKEN_PROGRAM_ID,\n  })\n  .rpc();\n</code></pre> <p>In this example:</p> <ul> <li>The user is swapping 1 USDC for repo tokens.</li> <li>The true parameter indicates it's a USDC to repo token swap (false would be the reverse).</li> <li>The necessary accounts are provided for the swap operation.</li> </ul> <p>Swaps incur a fee, which is set at the namespace level. This fee is applied to each swap, contributing to the liquidity and sustainability of the system.</p>"},{"location":"concepts/swaps/#conclusion","title":"Conclusion","text":"<p>Swaps are a crucial feature in Repo.Trade, allowing users to trade between USDC and repo tokens. The constant product formula ensures fair pricing, while fees contribute to the ecosystem's sustainability. Understanding how swaps work is essential for users looking to participate in the token economy of various repos.</p>"}]}